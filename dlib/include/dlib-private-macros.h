/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef DLIB_PRIVATE_MACROS_H
#define DLIB_PRIVATE_MACROS_H
#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _MSC_VER

    #pragma section( ".CRT$XCU", read )
    
    #define DLIB_PRIVATE_CONSTRUCTOR( _name_ )                  static void __cdecl _name_( void );														\
                                                                __declspec( allocate( ".CRT$XCU" ) ) void ( __cdecl * _name_ ## _ )( void ) = _name_;	\
                                                                static void __cdecl _name_( void )
    
	#include <Windows.h>

	#define DLIB_PRIVATE_ATOMIC_CAS_PTR( _old_, _new_, _ptr_ )  ( ( InterlockedCompareExchangePointer( ( void * volatile * )_ptr_, ( void * )_new_, ( void * )_old_ ) == _old_ ) ? 1 : 0 )

#else
    
    #define DLIB_PRIVATE_CONSTRUCTOR( _name_ )				    static void _name_( void ) __attribute__( ( constructor ) );                            \
                                                                static void _name_( void )

	#include <libkern/OSAtomic.h>

	#define DLIB_PRIVATE_ATOMIC_CAS_PTR( _old_, _new_, _ptr_ )  ( ( OSAtomicCompareAndSwapPtr( ( void * )_old_, ( void * )_new_, ( void * volatile * )_ptr_ ) ) ? 1 : 0 )
    
#endif

#ifdef DEBUG

#define DLIB_PRIVATE_WARN_MISSING_VAR( _type_, _module_, _name_ )               fprintf( stderr, "!!! DLIB WARNING - Missing Symbol: %s %s.%s\n", _type_, _module_, _name_ )
#define DLIB_PRIVATE_WARN_MISSING_FUNC( _module_, _ret_, _name_, _args_ )       fprintf( stderr, "!!! DLIB WARNING - Missing Symbol: %s %s.%s( %s )\n", _ret_, _module_, _name_, _args_ )

#else

#define DLIB_PRIVATE_WARN_MISSING_VAR( _type_, _module_, _name_ )             
#define DLIB_PRIVATE_WARN_MISSING_FUNC( _type_, _module_, _name_, _args_ )    

#endif

#define DLIB_PRIVATE_VAR( _module_, _type_, _name_ )            _type_ _name_;                                                                                  \
                                                                DLIB_CONSTRUCTOR( __DLib_Constructor_Var_ ## _module_ ## _ ## _type_ ## _ ## _name_ )           \
                                                                {                                                                                               \
                                                                    DLib_ModuleRef mod;                                                                         \
                                                                    DLib_SymbolRef sym;                                                                         \
                                                                                                                                                                \
                                                                    mod    = DLib_GetModule( # _module_ );                                                      \
                                                                    sym    = DLib_Module_GetSymbol( mod, # _name_ );                                            \
                                                                                                                                                                \
                                                                    if( sym == NULL )                                                                           \
                                                                    {                                                                                           \
                                                                        DLIB_PRIVATE_WARN_MISSING_VAR( # _type_, # _module_, # _name_ );                        \
                                                                                                                                                                \
                                                                        _name_ = NULL;                                                                          \
                                                                    }                                                                                           \
                                                                    else                                                                                        \
                                                                    {                                                                                           \
                                                                        _name_ = *( ( _type_ * )DLib_Symbol_GetAddress( sym ) );                                \
                                                                    }                                                                                           \
                                                                }
#define DLIB_PRIVATE_FUNC_START( _module_, _ret_, _name_, ... ) _ret_ _name_( __VA_ARGS__ )                                                                     \
                                                                {                                                                                               \
                                                                    static _ret_ ( * f )( __VA_ARGS__ ) = NULL;                                                 \
                                                                                                                                                                \
                                                                    if( DLIB_PRIVATE_ATOMIC_CAS_PTR( NULL, NULL, &f ) )                                         \
                                                                    {                                                                                           \
                                                                        {                                                                                       \
                                                                            DLib_ModuleRef mod;                                                                 \
                                                                            DLib_SymbolRef sym;                                                                 \
                                                                            void         * addr;                                                                \
                                                                            DLib_Ptr       laddr;                                                               \
                                                                            DLib_Ptr       lff;                                                                 \
                                                                            _ret_ ( * ff )( __VA_ARGS__ );                                                      \
                                                                                                                                                                \
                                                                            mod   = DLib_GetModule( # _module_ );                                               \
                                                                            sym   = DLib_Module_GetSymbol( mod, # _name_ );                                     \
                                                                                                                                                                \
                                                                            if( sym != NULL )                                                                   \
                                                                            {                                                                                   \
                                                                                addr  = DLib_Symbol_GetAddress( sym );                                          \
                                                                                laddr = ( DLib_Ptr )addr;                                                       \
                                                                                ff    = ( _ret_ ( * )( __VA_ARGS__ ) )laddr;                                    \
                                                                                lff   = ( DLib_Ptr )ff;                                                         \
                                                                                                                                                                \
                                                                                DLIB_PRIVATE_ATOMIC_CAS_PTR( NULL, ( void * )lff, &f );                         \
                                                                            }                                                                                   \
                                                                            else                                                                                \
                                                                            {                                                                                   \
                                                                                DLIB_PRIVATE_WARN_MISSING_FUNC( # _module_, # _ret_, # _name_, # __VA_ARGS__ ); \
                                                                            }                                                                                   \
                                                                        }                                                                                       \
                                                                    }                                                                                           \
                                                                    
#define DLIB_PRIVATE_FUNC_RET( _module_, _ret_, _name_, ... )       if( DLIB_PRIVATE_ATOMIC_CAS_PTR( NULL, NULL, &f ) )                                         \
                                                                    {                                                                                           \
                                                                        return ( _ret_ )0;                                                                      \
                                                                    }                                                                                           \
                                                                                                                                                                \
                                                                    return f( __VA_ARGS__ );                                                                    \
                                                            }
#define DLIB_PRIVATE_FUNC_NORET( _module_, _ret_, _name_, ... )     if( DLIB_PRIVATE_ATOMIC_CAS_PTR( NULL, NULL, &f ) )                                         \
                                                                    {                                                                                           \
                                                                        return;                                                                                 \
                                                                    }                                                                                           \
                                                                                                                                                                \
                                                                    f( __VA_ARGS__ );                                                                           \
                                                                }

#ifdef __cplusplus
}
#endif

#endif /* DLIB_PRIVATE_MACROS_H */
